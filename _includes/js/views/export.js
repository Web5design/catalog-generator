// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Application.Views.ExportView = (function(_super) {

    __extends(ExportView, _super);

    function ExportView() {
      return ExportView.__super__.constructor.apply(this, arguments);
    }

    ExportView.prototype.el = '#main';

    ExportView.prototype.template = $('#export_template').html();

    ExportView.prototype.events = {
      "focus .copy_zone": "select",
      "mouseup .copy_zone": "preventDefault"
    };

    ExportView.prototype.render = function() {
      var compiled;
      compiled = _.template(this.template);
      this.$el.html(compiled({
        json: this.collection.getJSON(),
        xml: this.collection.getXML(),
        html: this.collection.getHTML()
      }));
      return this.initDownload();
    };

    ExportView.prototype.select = function(e) {
      return e.target.select();
    };

    ExportView.prototype.preventDefault = function(e) {
      e.preventDefault;
      e.stopPropegation;
      return false;
    };

    ExportView.prototype.initDownload = function() {
      return $(".download").downloadify({
        swf: Application.url + "/swf/downloadify.swf",
        downloadImage: Application.url + "/img/download.png",
        filename: function() {
          return "data." + $(this.el).attr("data-type");
        },
        data: function() {
          return $("#" + $(this.el).attr("data-type")).val();
        }
      });
    };

    return ExportView;

  })(Backbone.View);

}).call(this);
